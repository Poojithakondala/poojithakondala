# -*- coding: utf-8 -*-
"""Swiggy.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W0hJ0r3SPofMcslmfNCcFC8YFKIPmmZT
"""

import pandas as pd
df=pd.read_excel('/content/Swiggy_Analytics_Data.xlsx')
print(df)

# Data Viewing
df.head()

df.tail(2)

df.info()

df.count()

df.describe()

df.nunique()

len(df)

df.columns

df.shape

df.size

df.index

df.dtypes

df.empty

df.values

# Data Cleaning
# Handling empty cells
df.isnull()
df.isnull().sum()

# Checking Duplicates
df.duplicated()
df.duplicated().sum()

# Remove Duplicates
df.drop_duplicates()

# Handling Date&Time
df['Order_Date']=pd.to_datetime(df['Order_Date'])
print(df['Order_Date'])

# Renaming columns
df.rename(columns={'Order_Hour':'Order_Hours'},inplace=True)
df.columns

# Drop Missing Values
df.dropna(inplace=True)
df.isnull().sum()

# Change data types
df['Order_ID']=df['Order_ID'].astype(str)
df.dtypes

df.to_csv('Cleaned_Swiggy_Analytics_Data.csv', index=False)

# 1. Time-Based Trends
import matplotlib.pyplot as plt
import seaborn as sns
df.groupby('Order_Date').size().plot()
plt.title("Order Volume Over Time")
plt.xlabel("Date")
plt.ylabel("Number of Orders")
plt.tight_layout()
plt.show()

df.groupby('Order_Date')['Order_Amount'].sum().plot(color='green')
plt.title("Total Revenue Over Time")
plt.xlabel("Date")
plt.ylabel("Revenue")
plt.tight_layout()
plt.show()


sns.countplot(x='Order_Hours', data=df)
plt.title("Orders by Hour of Day")
plt.tight_layout()
plt.show()

sns.countplot(x='Order_Weekday', data=df, order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])
plt.title("Orders by Weekday")
plt.tight_layout()
plt.show()

# 2. Restaurant & Cuisine Insights
df.groupby('Restaurant_Name').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.title("Restaurant Order Count")
plt.xlabel("Number of Orders")
plt.tight_layout()
plt.show()

df['Cuisine_Type'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title("Cuisine Type Distribution")
plt.ylabel("")
plt.tight_layout()
plt.show()

df.groupby('Cuisine_Type')['Order_Amount'].mean().sort_values().plot(kind='barh')
plt.title("Average Order Amount by Cuisine")
plt.xlabel("Avg Order Amount")
plt.tight_layout()
plt.show()

# 3.Revenue & Discount Analysis
df['Order_Amount'].plot(kind='hist', bins=30, alpha=0.7)
plt.title("Order Amount Distribution")
plt.xlabel("Order Amount")
plt.tight_layout()
plt.show()

df['Discount_Applied'].plot(kind='box')
plt.title("Discount Applied Distribution")
plt.tight_layout()
plt.show()

df.groupby('Payment_Mode')['Discount_Applied'].mean().sort_values().plot(kind='bar')
plt.title("Avg Discount by Payment Mode")
plt.ylabel("Discount")
plt.tight_layout()
plt.show()

# 4.Delivery Performance

sns.lineplot(x='Delivery_Distance_km', y='Delivery_Time_min', data=df)
plt.title("Delivery Distance vs Delivery Time")
plt.tight_layout()
plt.show()

# 5.Customer Ratings
sns.countplot(x='Customer_Rating', data=df,color= 'yellow')
plt.title("Customer Rating Distribution")
plt.tight_layout()
plt.show()

df.groupby('Customer_Rating')['Order_Amount'].mean().plot(kind='bar')
plt.title("Avg Order Value by Rating")
plt.ylabel("Order Amount")
plt.tight_layout()
plt.show()

# 6.Payment & City Tier Analysis
df['Payment_Mode'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title("Payment Mode Distribution")
plt.ylabel("")
plt.tight_layout()
plt.show()

df.groupby('City_Tier')['Order_Amount'].mean().plot(kind='bar')
plt.title("Avg Order Value by City Tier")
plt.ylabel("Order Amount")
plt.tight_layout()
plt.show()

sns.boxplot(x='City_Tier', y='Delivery_Time_min', data=df)
plt.title("Delivery Time by City Tier")
plt.tight_layout()
plt.show()

# 7. RFM Segmentation
rfm = df.dropna(subset=['Recency', 'Frequency', 'Monetary'])

rfm[['Recency', 'Frequency', 'Monetary']].hist(bins=30, figsize=(15, 5))
plt.suptitle("RFM Metric Distributions")
plt.tight_layout()
plt.show()

sns.scatterplot(x='Frequency', y='Monetary', data=rfm)
plt.title("Frequency vs Monetary")
plt.tight_layout()
plt.show()

sns.scatterplot(x='Recency', y='Frequency', data=rfm)
plt.title("Recency vs Frequency")
plt.tight_layout()
plt.show()

rfm_data = df[['Monetary', 'Frequency', 'Recency']].dropna()

X = rfm_data[['Frequency', 'Recency']]
y = rfm_data['Monetary']

model = LinearRegression()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("\nðŸ”¹ Monetary Model")
print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

import matplotlib.pyplot as plt

plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted")
plt.grid(True)
plt.tight_layout()
plt.show()

#Delivery_Status
from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('Delivery_Status').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_excel("Swiggy_Analytics_Data.xlsx", sheet_name="Full_Dataset")

# Drop missing values
order_data = df[['Order_Amount', 'Delivery_Distance_km', 'Delivery_Time_min',
                 'Discount_Applied', 'Customer_Rating', 'City_Tier']].dropna()

# Define features and target
X = order_data.drop('Order_Amount', axis=1)
y = order_data['Order_Amount']

# Pipeline with OneHotEncoder for City_Tier
preprocessor = ColumnTransformer(
    transformers=[('city', OneHotEncoder(drop='first'), ['City_Tier'])],
    remainder='passthrough'
)

pipeline = Pipeline([
    ('preprocessing', preprocessor),
    ('regressor', LinearRegression())
])

# Train/test split and fit
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

# Evaluation
print("ðŸ”¹ Order_Amount Model")
print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

sns.scatterplot(x=y_test, y=y_pred, alpha=0.5)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted")
plt.grid(True)
plt.tight_layout()
plt.show()

# Clustering Delivery Performance (KMeans + PCA)
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# Load dataset
df = pd.read_excel("Swiggy_Analytics_Data.xlsx", sheet_name="Full_Dataset")

# Select and clean delivery data
delivery_df = df[['Delivery_Time_min', 'Delivery_Distance_km', 'Order_Amount']].dropna()

# Standardize features
scaler = StandardScaler()
delivery_scaled = scaler.fit_transform(delivery_df)

# Apply KMeans clustering
kmeans = KMeans(n_clusters=4, random_state=42)
delivery_df['Cluster'] = kmeans.fit_predict(delivery_scaled)

# Use PCA to reduce dimensions for visualization
pca = PCA(n_components=2)
pca_components = pca.fit_transform(delivery_scaled)
delivery_df['PCA1'] = pca_components[:, 0]
delivery_df['PCA2'] = pca_components[:, 1]

# Plot clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=delivery_df, palette='Set2')
plt.title("Delivery Clusters (KMeans on Time, Distance, Order Amount)")
plt.tight_layout()
plt.show()

# Optional: Summary of each cluster
cluster_summary = delivery_df.groupby('Cluster')[['Delivery_Time_min', 'Delivery_Distance_km', 'Order_Amount']].mean()
print(" Cluster Averages:\n", cluster_summary)

# pivot table # heat map
import seaborn as sns
orders_pivot = df.pivot_table(index='Order_Weekday', columns='Order_Hours', values='Order_ID', aggfunc='count')
sns.heatmap(orders_pivot, cmap="YlOrRd", annot=True)
plt.title("Order Heatmap by Day & Hour")



















































